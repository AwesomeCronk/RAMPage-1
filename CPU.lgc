$include memory/memory.py > mem
$include memory/fileMemory.py > fileMem
$include registers/register08.lgc > reg08
$include registers/register11.lgc > reg11
$include indicators/ledBar8.py > ledBar8
$include indicators/ledBar5.py > ledBar5
$include enc_dec_mux_dem/multiplexer3.lgc > mux3
$include latches/DLatch.lgc > dLatch

//// Main bus ////
label \high & 255 255 255  0 0 0  70 1  "Main Bus" fg
ledBar8 bus[0..7] & 255 20 20  70 2

switch > busInterface0 & '1'
switch > busInterface1 & '2'
switch > busInterface2 & '3'
switch > busInterface3 & '4'
switch > busInterface4 & '5'
switch > busInterface5 & '6'
switch > busInterface6 & '7'
switch > busInterface7 & '8'
label \high & 255 255 255  0 0 0  1 14  "Bus Interface (1..8)" fg
ledBar8 busInterface[0..7] & 250 250 20  1 15

//// Paging bus ////
label \high & 255 255 255  0 0 0  57 1  "Paging Bus" fg
ledBar5 page[0..4] & 255 20 20  62 2

//// Memory ////
// Memory uses all 5 bits of paging bus and lower 6 bits of main bus for addressing
reg08 \low \low bus[2..7] ctrlMemAdrIn > null0 null1 memAddr[0..5]
reg08 bus[0..7] ctrlMemDtaIn > memDataIn[0..7]

mem page[0..4] memAddr[0..5]  memDataIn[0..7]  ctrlMemDtaIn > memDataOut[0..7]
// fileMem page[0..4] memAddr[0..5]]  memDataIn[0..7]  ctrlMemDtaIn > memDataOut[0..7] & ROM.bin
tristate memDataOut0 ctrlMemDtaOut > bus0
tristate memDataOut1 ctrlMemDtaOut > bus1
tristate memDataOut2 ctrlMemDtaOut > bus2
tristate memDataOut3 ctrlMemDtaOut > bus3
tristate memDataOut4 ctrlMemDtaOut > bus4
tristate memDataOut5 ctrlMemDtaOut > bus5
tristate memDataOut6 ctrlMemDtaOut > bus6
tristate memDataOut7 ctrlMemDtaOut > bus7


//// GP Registers ////


//// ALU ////

//// Control logic ////

// Instruction register
// Connects to all 5 bits of paging bus and lower 6 bits of main bus
reg11 page[0..4] bus[2..7] ctrlInsRegIn > insRegOut[00..10]

tristate insRegOut00 ctrlInsRegOut > page0
tristate insRegOut01 ctrlInsRegOut > page1
tristate insRegOut02 ctrlInsRegOut > page2
tristate insRegOut03 ctrlInsRegOut > page3
tristate insRegOut04 ctrlInsRegOut > page4
tristate insRegOut05 ctrlInsRegOut > bus2
tristate insRegOut06 ctrlInsRegOut > bus3
tristate insRegOut07 ctrlInsRegOut > bus4
tristate insRegOut08 ctrlInsRegOut > bus5
tristate insRegOut09 ctrlInsRegOut > bus6
tristate insRegOut10 ctrlInsRegOut > bus7

// Instruction decoder
// For temporary, this is just a bunch of switches.

switch > ctrlMemAdrIn  & 'q'
switch > ctrlMemDtaIn  & 'w'
switch > ctrlMemDtaOut & 'e'
switch > ctrlInsRegIn  & 'r'
switch > ctrlInsRegOut & 't'
switch > ctrlActRegIn  & 'y'
switch > ctrlActRegOut & 'u'
switch > ctrlActRegSet & 'i'
switch > ctrlBusIntMn  & 'o'
switch > ctrlBusIntPg  & 'p'

label \high & 255 255 255  0 0 0  1 1 "Control Lines:"  fg

label \high & 255 255 255  0 0 0  3  3 "MemAdrIn  (Q)"  fg
label \high & 255 255 255  0 0 0  3  4 "MemDtaIn  (W)"  fg
label \high & 255 255 255  0 0 0  3  5 "MemDtaOut (E)"  fg
label \high & 255 255 255  0 0 0  3  6 "InsRegIn  (R)"  fg
label \high & 255 255 255  0 0 0  3  7 "InsRegOut (T)"  fg
label \high & 255 255 255  0 0 0  3  8 "ActRegIn  (Y)"  fg
label \high & 255 255 255  0 0 0  3  9 "ActRegOut (U)"  fg
label \high & 255 255 255  0 0 0  3 10 "ActRegSet (I)"  fg
label \high & 255 255 255  0 0 0  3 11 "BusIntMn  (O)"  fg
label \high & 255 255 255  0 0 0  3 12 "BusIntPg  (P)"  fg

led ctrlMemAdrIn  & 255 255 20  1  3
led ctrlMemDtaIn  & 255 255 20  1  4
led ctrlMemDtaOut & 255 255 20  1  5
led ctrlInsRegIn  & 255 255 20  1  6
led ctrlInsRegOut & 255 255 20  1  7
led ctrlActRegIn  & 255 255 20  1  8
led ctrlActRegOut & 255 255 20  1  9
led ctrlActRegSet & 255 255 20  1 10
led ctrlBusIntMn  & 255 255 20  1 11
led ctrlBusIntPg  & 255 255 20  1 12

// Register selector
// Takes the ctrlActReg lines and multiplexes them
dLatch bus5 ctrlActRegSet > actRegID0
dLatch bus6 ctrlActRegSet > actRegID1
dLatch bus7 ctrlActRegSet > actRegID2
$include memory/memory.py > mem
$include memory/fileMemory.py > fileMem
$include registers/register08.lgc > reg08
$include registers/register11.lgc > reg11
$include indicators/ledBar.py > ledBar
$include enc_dec_mux_dem/decoder4.ttb > decode4
$include latches/DLatch.lgc > dLatch


//// Main bus ////
label \high & 255 255 255  0 0 0  70 1  "Main Bus" fg
ledBar bus[0..7] & 255 20 20  70 2  8

switch > busInterface0 & 1
switch > busInterface1 & 2
switch > busInterface2 & 3
switch > busInterface3 & 4
switch > busInterface4 & 5
switch > busInterface5 & 6
switch > busInterface6 & 7
switch > busInterface7 & 8


//// Paging bus ////
// Bus for upper 5 bits of memory address
label \high & 255 255 255  0 0 0  57 1  "Paging Bus" fg
ledBar page[0..4] & 255 20 20  62 2 5


//// Page register ////
// Link between main bus and paging bus, set by user code
label \high & 255 255 255  0 0 0  30 1  "Page" fg
ledBar actPage[0..4] & 255 20 20  30 2  5

dLatch bus3 ctrlActPagIn > actPage0
dLatch bus4 ctrlActPagIn > actPage1
dLatch bus5 ctrlActPagIn > actPage2
dLatch bus6 ctrlActPagIn > actPage3
dLatch bus7 ctrlActPagIn > actPage4

tristate actPage0 ctrlActPagOut > page0
tristate actPage1 ctrlActPagOut > page1
tristate actPage2 ctrlActPagOut > page2
tristate actPage3 ctrlActPagOut > page3
tristate actPage4 ctrlActPagOut > page4


//// Memory ////
// Memory uses all 5 bits of paging bus and lower 6 bits of main bus for addressing
reg08 \low \low bus[2..7] ctrlMemAdrIn > null0 null1 memAddr[0..5]
label \high & 255 255 255  0 0 0  36 1 "Address" fg
ledBar memAddr[0..5] & 255 20 20  37 2  6

mem page[0..4] memAddr[0..5]  bus[0..7]  ctrlMemDtaIn > memDtaOut[0..7]
// fileMem page[0..4] memAddr[0..5]]  memDtaIn[0..7]  ctrlMemDtaIn > memDtaOut[0..7] & ROM.bin
tristate memDtaOut0 ctrlMemDtaOut > bus0
tristate memDtaOut1 ctrlMemDtaOut > bus1
tristate memDtaOut2 ctrlMemDtaOut > bus2
tristate memDtaOut3 ctrlMemDtaOut > bus3
tristate memDtaOut4 ctrlMemDtaOut > bus4
tristate memDtaOut5 ctrlMemDtaOut > bus5
tristate memDtaOut6 ctrlMemDtaOut > bus6
tristate memDtaOut7 ctrlMemDtaOut > bus7


//// GP Registers ////
reg08 bus[0..7] ctrlRegGP0In > regGP0Out[0..7]   // Register
tristate regGP0Out0 regGP0Sel > actRegOutBus0
tristate regGP0Out1 regGP0Sel > actRegOutBus1
tristate regGP0Out2 regGP0Sel > actRegOutBus2
tristate regGP0Out3 regGP0Sel > actRegOutBus3
tristate regGP0Out4 regGP0Sel > actRegOutBus4
tristate regGP0Out5 regGP0Sel > actRegOutBus5
tristate regGP0Out6 regGP0Sel > actRegOutBus6
tristate regGP0Out7 regGP0Sel > actRegOutBus7
reg08 bus[0..7] ctrlRegGP1In > regGP1Out[0..7]
tristate regGP1Out0 regGP1Sel > actRegOutBus0
tristate regGP1Out1 regGP1Sel > actRegOutBus1
tristate regGP1Out2 regGP1Sel > actRegOutBus2
tristate regGP1Out3 regGP1Sel > actRegOutBus3
tristate regGP1Out4 regGP1Sel > actRegOutBus4
tristate regGP1Out5 regGP1Sel > actRegOutBus5
tristate regGP1Out6 regGP1Sel > actRegOutBus6
tristate regGP1Out7 regGP1Sel > actRegOutBus7
reg08 bus[0..7] ctrlRegGP2In > regGP2Out[0..7]
tristate regGP2Out0 regGP2Sel > actRegOutBus0
tristate regGP2Out1 regGP2Sel > actRegOutBus1
tristate regGP2Out2 regGP2Sel > actRegOutBus2
tristate regGP2Out3 regGP2Sel > actRegOutBus3
tristate regGP2Out4 regGP2Sel > actRegOutBus4
tristate regGP2Out5 regGP2Sel > actRegOutBus5
tristate regGP2Out6 regGP2Sel > actRegOutBus6
tristate regGP2Out7 regGP2Sel > actRegOutBus7
reg08 bus[0..7] ctrlRegGP3In > regGP3Out[0..7]
tristate regGP3Out0 regGP3Sel > actRegOutBus0
tristate regGP3Out1 regGP3Sel > actRegOutBus1
tristate regGP3Out2 regGP3Sel > actRegOutBus2
tristate regGP3Out3 regGP3Sel > actRegOutBus3
tristate regGP3Out4 regGP3Sel > actRegOutBus4
tristate regGP3Out5 regGP3Sel > actRegOutBus5
tristate regGP3Out6 regGP3Sel > actRegOutBus6
tristate regGP3Out7 regGP3Sel > actRegOutBus7
reg08 bus[0..7] ctrlRegGP4In > regGP4Out[0..7]
tristate regGP4Out0 regGP4Sel > actRegOutBus0
tristate regGP4Out1 regGP4Sel > actRegOutBus1
tristate regGP4Out2 regGP4Sel > actRegOutBus2
tristate regGP4Out3 regGP4Sel > actRegOutBus3
tristate regGP4Out4 regGP4Sel > actRegOutBus4
tristate regGP4Out5 regGP4Sel > actRegOutBus5
tristate regGP4Out6 regGP4Sel > actRegOutBus6
tristate regGP4Out7 regGP4Sel > actRegOutBus7


//// ALU ////

//// Control logic ////

// Instruction register
// Connects to all 5 bits of paging bus and lower 6 bits of main bus
reg11 page[0..4] bus[2..7] ctrlInsRegIn > insRegOut[00..10]

tristate insRegOut00 ctrlInsRegOut > page0
tristate insRegOut01 ctrlInsRegOut > page1
tristate insRegOut02 ctrlInsRegOut > page2
tristate insRegOut03 ctrlInsRegOut > page3
tristate insRegOut04 ctrlInsRegOut > page4
tristate insRegOut05 ctrlInsRegOut > bus2
tristate insRegOut06 ctrlInsRegOut > bus3
tristate insRegOut07 ctrlInsRegOut > bus4
tristate insRegOut08 ctrlInsRegOut > bus5
tristate insRegOut09 ctrlInsRegOut > bus6
tristate insRegOut10 ctrlInsRegOut > bus7

// Instruction decoder
// For temporary, this is just a bunch of switches
// Rename to "ctrlOverride____" when instruction register is implemented and tristate them

switch > ctrlMemAdrIn  & q
switch > ctrlMemDtaIn  & w
switch > ctrlMemDtaOut & e
switch > ctrlInsRegIn  & r
switch > ctrlInsRegOut & t
switch > ctrlActRegIn  & y
switch > ctrlActRegOut & u
switch > ctrlActRegSel & i
switch > ctrlBusIntMn  & o
switch > ctrlBusIntPg  & p
switch > ctrlActPagIn  & a
switch > ctrlActPagOut & s

label \high & 255 255 255  0 0 0  1 1 "Control Lines:"  fg

label \high & 255 255 255  0 0 0  3  3 "MemAdrIn  (Q)"  fg
label \high & 255 255 255  0 0 0  3  4 "MemDtaIn  (W)"  fg
label \high & 255 255 255  0 0 0  3  5 "MemDtaOut (E)"  fg
label \high & 255 255 255  0 0 0  3  6 "InsRegIn  (R)"  fg
label \high & 255 255 255  0 0 0  3  7 "InsRegOut (T)"  fg
label \high & 255 255 255  0 0 0  3  8 "ActRegIn  (Y)"  fg
label \high & 255 255 255  0 0 0  3  9 "ActRegOut (U)"  fg
label \high & 255 255 255  0 0 0  3 10 "ActRegSel (I)"  fg
label \high & 255 255 255  0 0 0  3 11 "BusIntMn  (O)"  fg
label \high & 255 255 255  0 0 0  3 12 "BusIntPg  (P)"  fg
label \high & 255 255 255  0 0 0  3 13 "ActPagIn  (A)"  fg
label \high & 255 255 255  0 0 0  3 14 "ActPagOut (S)"  fg

led ctrlMemAdrIn  & 255 255 20  1  3
led ctrlMemDtaIn  & 255 255 20  1  4
led ctrlMemDtaOut & 255 255 20  1  5
led ctrlInsRegIn  & 255 255 20  1  6
led ctrlInsRegOut & 255 255 20  1  7
led ctrlActRegIn  & 255 255 20  1  8
led ctrlActRegOut & 255 255 20  1  9
led ctrlActRegSel & 255 255 20  1 10
led ctrlBusIntMn  & 255 255 20  1 11
led ctrlBusIntPg  & 255 255 20  1 12
led ctrlActPagIn  & 255 255 20  1 13
led ctrlActPagOut & 255 255 20  1 14

// Bus interface
label \high & 255 255 255  0 0 0  1 20  "Bus Interface (1..8)" fg
ledBar busInterface[0..7] & 250 250 20  1 21 8

tristate busInterface0 ctrlBusIntMn > bus0
tristate busInterface1 ctrlBusIntMn > bus1
tristate busInterface2 ctrlBusIntMn > bus2
tristate busInterface3 ctrlBusIntMn > bus3
tristate busInterface4 ctrlBusIntMn > bus4
tristate busInterface5 ctrlBusIntMn > bus5
tristate busInterface6 ctrlBusIntMn > bus6
tristate busInterface7 ctrlBusIntMn > bus7

tristate busInterface3 ctrlBusIntPg > page0
tristate busInterface4 ctrlBusIntPg > page1
tristate busInterface5 ctrlBusIntPg > page2
tristate busInterface6 ctrlBusIntPg > page3
tristate busInterface7 ctrlBusIntPg > page4

// Register selector
// Takes the ctrlActReg lines and multiplexes them

label \high & 255 255 255  0 0 0  30 4 "Act Reg ID" fg
ledBar actRegID[0..3] & 255 20 20  30 5  4

label \high & 255 255 255  0 0 0  30 7 "Act Reg Data" fg
ledBar actRegOutBus[0..7] & 255 20 20  30 8  8

dLatch bus4 ctrlActRegSel > actRegID0
dLatch bus5 ctrlActRegSel > actRegID1
dLatch bus6 ctrlActRegSel > actRegID2
dLatch bus7 ctrlActRegSel > actRegID3

decode4 actRegID[0..3] > regGP0Sel regGP1Sel regGP2Sel regGP3Sel regGP4Sel regALUASel regALUBSel regALUResultSel regFlagsSel regGPIOADirSel regGPIOASel regGPIOBDirSel regGPIOBSel regPrlPortSel regI2CASel regI2CBSel

and ctrlActRegIn regGP0Sel > ctrlRegGP0In
and ctrlActRegIn regGP1Sel > ctrlRegGP1In
and ctrlActRegIn regGP2Sel > ctrlRegGP2In
and ctrlActRegIn regGP3Sel > ctrlRegGP3In
and ctrlActRegIn regGP4Sel > ctrlRegGP4In
and ctrlActRegIn regALUASel > ctrlRegALUAIn
and ctrlActRegIn regALUBSel > ctrlRegALUBIn
and ctrlActRegIn regALUResultSel > ctrlRegALUResultIn
and ctrlActRegIn regFlagsSel > ctrlRegFlagsIn
and ctrlActRegIn regGPIOADirSel > ctrlRegGPIOADirIn
and ctrlActRegIn regGPIOASel > ctrlRegGPIOAIn
and ctrlActRegIn regGPIOBDirSel > ctrlRegGPIOBDirIn
and ctrlActRegIn regGPIOBSel > ctrlRegGPIOBIn
and ctrlActRegIn regPrlPortSel > ctrlRegPrlPortIn
and ctrlActRegIn regI2CASel > ctrlRegI2CAIn
and ctrlActRegIn regI2CBSel > ctrlRegI2CBIn
// and ctrlActRegOut regGP0Sel > ctrlRegGP0Out
// and ctrlActRegOut regGP1Sel > ctrlRegGP1Out
// and ctrlActRegOut regGP2Sel > ctrlRegGP2Out
// and ctrlActRegOut regGP3Sel > ctrlRegGP3Out
// and ctrlActRegOut regGP4Sel > ctrlRegGP4Out
// and ctrlActRegOut regALUASel > ctrlRegALUAOut
// and ctrlActRegOut regALUBSel > ctrlRegALUBOut
// and ctrlActRegOut regALUResultSel > ctrlRegALUResultOut
// and ctrlActRegOut regFlagsSel > ctrlRegFlagsOut
// and ctrlActRegOut regGPIOADirSel > ctrlRegGPIOADirOut
// and ctrlActRegOut regGPIOASel > ctrlRegGPIOAOut
// and ctrlActRegOut regGPIOBDirSel > ctrlRegGPIOBDirOut
// and ctrlActRegOut regGPIOBSel > ctrlRegGPIOBOut
// and ctrlActRegOut regPrlPortSel > ctrlRegPrlPortOut
// and ctrlActRegOut regI2CASel > ctrlRegI2CAOut
// and ctrlActRegOut regI2CBSel > ctrlRegI2CBOut
tristate actRegOutBus0 ctrlActRegOut > bus0
tristate actRegOutBus1 ctrlActRegOut > bus1
tristate actRegOutBus2 ctrlActRegOut > bus2
tristate actRegOutBus3 ctrlActRegOut > bus3
tristate actRegOutBus4 ctrlActRegOut > bus4
tristate actRegOutBus5 ctrlActRegOut > bus5
tristate actRegOutBus6 ctrlActRegOut > bus6
tristate actRegOutBus7 ctrlActRegOut > bus7